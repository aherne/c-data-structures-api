// Defines logic of a graph vertex and its adjacent unweighted edges saved in a HASH SET data structure
template<typename T, int (*compare)(const T&, const T&) = comparator<T>, std::size_t (*hash)(const T&) = hash<T>>
class GraphVertex {
	GraphVertex(const T& data)
	~GraphVertex()
	void setData(const T& data)
	const T& getData() const
	HashSet<GraphVertex<T, compare, hash>*, compareVertex<T, compare, hash>, hashVertex<T, compare, hash>>*& getEdges()
	bool isEdge(GraphVertex<T, compare, hash>*& vertex) const
	void addEdge(GraphVertex<T, compare, hash>* vertex)
	void removeEdge(GraphVertex<T, compare, hash>* vertex)
}

// Abstract class that defines operations one can perform on an UNWEIGHTED GRAPH abstract data type
template<typename T, int (*compare)(const T&, const T&) = comparator<T>, std::size_t (*hash)(const T&) = hash<T>>
class Graph {
	virtual ~Graph()
	GraphVertex<T, compare, hash>* createVertex(const T& data)
	virtual void removeVertex(GraphVertex<T, compare, hash>*& vertex) = 0
	virtual void createEdge(GraphVertex<T, compare, hash>*& left, GraphVertex<T, compare, hash>*& right) = 0
	virtual void removeEdge(GraphVertex<T, compare, hash>*& left, GraphVertex<T, compare, hash>*& right) = 0
	bool isPath(GraphVertex<T, compare, hash>*& left, GraphVertex<T, compare, hash>*& right)
	std::size_t getSize() const
	bool contains(const T& data) const
	GraphVertex<T, compare, hash>* search(const T& data)
}

// Class that implements DIRECTED GRAPH data structure on top of UNWEIGHTED GRAPH abstract data type
template<typename T, int (*compare)(const T&, const T&) = comparator<T>, std::size_t (*hash)(const T&) = hash<T>>
class DirectedGraph : public Graph<T,compare,hash> {
}

// Class that implements UNDIRECTED GRAPH data structure on top of UNWEIGHTED GRAPH abstract data type
template<typename T, int (*compare)(const T&, const T&) = comparator<T>, std::size_t (*hash)(const T&) = hash<T>>
class UndirectedGraph : public Graph<T,compare,hash> {
}

// Abstract class implementing blueprints for vertex visitation during breadth-first-search UNWEIGHTED GRAPH traversal
template<typename T, int (*compare)(const T&, const T&) = comparator<T>, std::size_t (*hash)(const T&) = hash<T>>
class BFS_GraphVertexVisitor {
	virtual ~BFS_GraphVertexVisitor(){}
	virtual bool visit(GraphVertex<T, compare, hash>* const& element, GraphVertex<T, compare, hash>* const& parent) = 0
	virtual bool isVisited(GraphVertex<T, compare, hash>* const& element) = 0
}

// Abstract class implementing blueprints for vertex visitation during depth-first-search UNWEIGHTED GRAPH traversal
template<typename T, int (*compare)(const T&, const T&) = comparator<T>, std::size_t (*hash)(const T&) = hash<T>>
class DFS_GraphVertexVisitor {
	virtual ~DFS_GraphVertexVisitor(){}
	virtual bool visit(GraphVertex<T, compare, hash>* const& element) = 0
	virtual bool isVisited(GraphVertex<T, compare, hash>* const& element) = 0
}

// Function that implements breadth-first-search traversal for UNWEIGHTED GRAPH from start vertex
template<typename T, int (*compare)(const T&, const T&) = comparator<T>, std::size_t (*hash)(const T&) = hash<T>>
inline void BreadthFirstSearchGraphIterator(GraphVertex<T, compare, hash>* const& vertex, BFS_GraphVertexVisitor<T, compare, hash>* const& visitor)

// Function that implements depth-first-search traversal for UNWEIGHTED GRAPH from start vertex
template<typename T, int (*compare)(const T&, const T&) = comparator<T>, std::size_t (*hash)(const T&) = hash<T>>
inline void DepthFirstSearchGraphIterator(GraphVertex<T, compare, hash>* const& vertex, DFS_GraphVertexVisitor<T, compare, hash>* const& visitor)