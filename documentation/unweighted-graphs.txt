// Defines logic of a graph VERTEX and its adjacent unweighted EDGES saved in a HASH SET data structure
template<typename T, int (*compare)(const T&, const T&) = comparator<T>, std::size_t (*hash)(const T&) = hash<T>>
class GraphVertex {
	// Creates a vertex by value inside
	GraphVertex(const T& data)
	// Clears all edges it points to from heap memory
	~GraphVertex()
	// Sets value inside vertex
	void setData(const T& data)
	// Gets value inside vertex
	const T& getData() const
	// Gets all edges current vertex points to 
	HashSet<GraphVertex<T, compare, hash>*, compareVertex<T, compare, hash>, hashVertex<T, compare, hash>>* const& getEdges()
	// Checks if current vertex has an edge with that of input
	bool isEdge(GraphVertex<T, compare, hash>* const& vertex) const
	// Creates an edge between current vertex and that of input
	void addEdge(GraphVertex<T, compare, hash>* const& vertex)
	// Removes edge between current vertex and that of input
	void removeEdge(GraphVertex<T, compare, hash>* const& vertex)
}

// Abstract class that defines operations one can perform on an UNWEIGHTED GRAPH abstract data type where vertexes hold unique values
template<typename T, int (*compare)(const T&, const T&) = comparator<T>, std::size_t (*hash)(const T&) = hash<T>>
class Graph {
	// Clears all data allocated in heap memory
	virtual ~Graph()
	// Creates vertex and adds it to graph
	GraphVertex<T, compare, hash>* createVertex(const T& data)
	// Removes vertex from graph
	virtual void removeVertex(GraphVertex<T, compare, hash>* const& vertex) = 0
	// Creates edge between vertexes
	virtual void createEdge(GraphVertex<T, compare, hash>* const& left, GraphVertex<T, compare, hash>* const& right) = 0
	// Removes edge between vertexes
	virtual void removeEdge(GraphVertex<T, compare, hash>* const& left, GraphVertex<T, compare, hash>* const& right) = 0
	// Checks if there is a path of edges between vertexes
	bool isPath(GraphVertex<T, compare, hash>* const& left, GraphVertex<T, compare, hash>* const& right)
	// Gets number of vertexes in graph
	std::size_t getSize() const
	// Checks if graph contains a vertex by value
	bool contains(const T& data) const
	// Searches graph for a vertex by value
	GraphVertex<T, compare, hash>* search(const T& data)
}

// Class that implements DIRECTED GRAPH data structure on top of UNWEIGHTED GRAPH abstract data type
template<typename T, int (*compare)(const T&, const T&) = comparator<T>, std::size_t (*hash)(const T&) = hash<T>>
class DirectedGraph : public Graph<T,compare,hash> {
}

// Class that implements UNDIRECTED GRAPH data structure on top of UNWEIGHTED GRAPH abstract data type
template<typename T, int (*compare)(const T&, const T&) = comparator<T>, std::size_t (*hash)(const T&) = hash<T>>
class UndirectedGraph : public Graph<T,compare,hash> {
}

// Abstract class implementing blueprints for vertex visitation during breadth-first-search UNWEIGHTED GRAPH traversal
template<typename T, int (*compare)(const T&, const T&) = comparator<T>, std::size_t (*hash)(const T&) = hash<T>>
class BFS_GraphVertexVisitor {
	// Deallocates all data from heap memory
	virtual ~BFS_GraphVertexVisitor(){}
	// Visits a vertex during iteration. If false is returned, iteration stops!
	virtual bool visit(GraphVertex<T, compare, hash>* const& element, GraphVertex<T, compare, hash>* const& parent) = 0
	// Checks if a vertex has already been visited
	virtual bool isVisited(GraphVertex<T, compare, hash>* const& element) = 0
}

// Function that implements breadth-first-search traversal for UNWEIGHTED GRAPH from start vertex
template<typename T, int (*compare)(const T&, const T&) = comparator<T>, std::size_t (*hash)(const T&) = hash<T>>
inline void BreadthFirstSearchGraphIterator(GraphVertex<T, compare, hash>* const& vertex, BFS_GraphVertexVisitor<T, compare, hash>* const& visitor)

// Abstract class implementing blueprints for vertex visitation during depth-first-search UNWEIGHTED GRAPH traversal
template<typename T, int (*compare)(const T&, const T&) = comparator<T>, std::size_t (*hash)(const T&) = hash<T>>
class DFS_GraphVertexVisitor {
	// Deallocates all data from heap memory
	virtual ~DFS_GraphVertexVisitor(){}
	// Visits a vertex during iteration. If false is returned, iteration stops!
	virtual bool visit(GraphVertex<T, compare, hash>* const& element) = 0
	// Checks if a vertex has already been visited
	virtual bool isVisited(GraphVertex<T, compare, hash>* const& element) = 0
}

// Function that implements depth-first-search traversal for UNWEIGHTED GRAPH from start vertex
template<typename T, int (*compare)(const T&, const T&) = comparator<T>, std::size_t (*hash)(const T&) = hash<T>>
inline void DepthFirstSearchGraphIterator(GraphVertex<T, compare, hash>* const& vertex, DFS_GraphVertexVisitor<T, compare, hash>* const& visitor)